<objdefs>
   <obj.normal id="keyb mpe" sha="2810D483315FF0CC5C9E5EE7343F6AAFD1780297">
      <sDescription>Keyboard input for MIDI polyphonic expression</sDescription>
      <author>Mark Harris</author>
      <license>BSD</license>
      <inlets/>
      <outlets>
         <frac32.bipolar  name="note" description="midi note number (-64..63)" SumBuffer="false"/>
         <bool32 name="gate" description="key pressed, no retrigger legato" SumBuffer="false"/>
         <bool32 name="gate2" description="key pressed, retrigger on legato" SumBuffer="false"/>
         <frac32.positive name="velocity" description="note-on velocity" SumBuffer="false"/>
         <frac32.positive name="releaseVelocity" description="note-off velocity" SumBuffer="false"/>
         <frac32.positive name="pressure" description="continuous pressure" SumBuffer="false"/>
         <frac32.bipolar  name="bend" description="continuous pitchbend (-64..63)" SumBuffer="false"/>
         <frac32.bipolar  name="timbre" description="continuous timbre (-64..63)" SumBuffer="false"/>
         <frac32.bipolar  name="pitch" description="pitch including pitchbend" SumBuffer="false"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <code.declaration><![CDATA[int8_t _note;
int32_t _gate;
int32_t _gate2;
uint8_t _velo;
uint8_t _rvelo;
uint32_t _pressure;
int32_t _bend;
int32_t _timbre;
uint8_t _lastRPN_LSB; 
uint8_t _lastRPN_MSB; 
uint8_t _bendRange;
int32_t _pitch;

]]></code.declaration>
      <code.init><![CDATA[
_gate = 0;
_note = 0;
_pressure = 0;
_bend = 0;
_timbre = 0;
_bendRange = 48;
]]></code.init>
      <code.krate><![CDATA[
%note%= _note<<21;
%gate%= _gate;
%gate2%= _gate2;
_gate2 = _gate;
%velocity%= _velo;
%releaseVelocity%= _rvelo;
%pressure% = _pressure;
%bend% = _bend;
%timbre% = _timbre;
%pitch% = _pitch;
]]></code.krate>
      <code.midihandler><![CDATA[
if ((status == MIDI_NOTE_ON + %midichannel%) && (data2)) {
  _velo = data2<<20;
  _note = data1-64;
  _gate = 1<<27;
  _gate2 = 0;
  _pitch = (_note << 21) + ((_bend >> 6)* _bendRange );
} else if (((status == MIDI_NOTE_ON + %midichannel%) && (!data2))||
          (status == MIDI_NOTE_OFF + %midichannel%)) {
  if (_note == data1-64) {
    _rvelo = data2<<20;
    _gate = 0;
  }
} else if (status == %midichannel% + MIDI_CHANNEL_PRESSURE) {
  _pressure = data1<<20;
} else if (status == %midichannel% + MIDI_PITCH_BEND) {
  _bend = ((int)((data2<<7)+data1)-0x2000)<<14;
  _pitch = (_note << 21) + ((_bend >> 6)* _bendRange );
} else if (status == %midichannel% + MIDI_CONTROL_CHANGE) {
  if (data1 == MIDI_C_TIMBRE) {
    _timbre = ((int)(data2<<7)-0x2000)<<14;
  } else if(data1 == MIDI_C_ALL_NOTES_OFF) {
    _gate = 0;
  } else if (data1 == MIDI_C_RPN_MSB || data1 == MIDI_C_RPN_LSB || data1 == MIDI_C_DATA_ENTRY) {
    switch(data1) {
         case MIDI_C_RPN_LSB: _lastRPN_LSB = data2; break;
         case MIDI_C_RPN_MSB: _lastRPN_MSB = data2; break;
         case MIDI_C_DATA_ENTRY: {
              if (_lastRPN_LSB == 0 && _lastRPN_MSB == 0) {
                _bendRange = data2;
              }
            }
            break;
        default: break;
    }
  }
}
]]></code.midihandler>
   </obj.normal>
</objdefs>
