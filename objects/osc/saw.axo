<objdefs>
   <obj.normal id="saw" uuid="672d282db829da944d5580258269aa349c94bb24" sha="fac485938f0744316bc8361d4ad33f897cbff287">
      <upgradeSha>1a5088484533a3633e3eb849de47b478f1599369</upgradeSha>
      <sDescription>Bandwith limited saw wave oscillator</sDescription>
      <author>Johannes Taelman</author>
      <license>BSD</license>
      <helpPatch>osc.axh</helpPatch>
      <inlets>
         <frac32.bipolar name="pitchm" description="pitch modulation (semitones)"/>
      </inlets>
      <outlets>
         <frac32buffer.bipolar name="wave" description="saw wave, anti-aliased"/>
      </outlets>
      <displays/>
      <params>
         <frac32.s.map.pitch name="pitch" noLabel="true">
            <MinValue v="-64.0"/>
            <MaxValue v="63.5"/>
         </frac32.s.map.pitch>
      </params>
      <attribs/>
      <code.declaration><![CDATA[  int32_t osc_p;
  static const int blepvoices = 4;
  int16_t *oscp[blepvoices];
  uint32_t nextvoice;
]]></code.declaration>
      <code.init><![CDATA[    int j;
    for(j=0;j<blepvoices;j++)
      oscp[j] = &blept[BLEPSIZE-1];   nextvoice = 0;]]></code.init>
      <code.krate><![CDATA[      int32_t freq;
      MTOFEXTENDED(param_pitch + inlet_pitchm,freq);
  int j;
  int16_t *lastblep = &blept[BLEPSIZE-1];
  for(j=0;j<BUFSIZE;j++){
    int i;
    int p;
    p = osc_p;
    osc_p = p+freq;
    if ((osc_p>0)&&!(p>0)){   // dispatch
      nextvoice = (nextvoice+1)&(blepvoices-1);
      int32_t x = osc_p/(freq>>6);
      oscp[nextvoice] = &blept[x];
    }
    int32_t sum=0;
    for(i=0;i<blepvoices;i++){ // sample
      int16_t *t = oscp[i];
      sum+=*t;
      t+=64;
      if (t>=lastblep) t=lastblep;
      oscp[i]=t;
    }
    sum = (16384*blepvoices)-sum - 8192;
    uint32_t g = osc_p;
    sum=(g>>5) + (sum<<13);
    outlet_wave[j]=sum;
  }]]></code.krate>
   </obj.normal>
</objdefs>